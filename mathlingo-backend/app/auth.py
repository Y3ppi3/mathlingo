import os
from datetime import datetime, timedelta
from typing import Optional

import bcrypt
from passlib.handlers.bcrypt import bcrypt_sha256
import jwt
from dotenv import load_dotenv
from fastapi import Request, Depends, HTTPException, status
from jose import JWTError
from passlib.context import CryptContext
from sqlalchemy.orm import Session

from app.database import get_db
from app.models import User, Admin

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    SECRET_KEY = "supersecretkey"  # –£–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 * 7

pwd_context = CryptContext(
    schemes=["bcrypt"],
    deprecated="auto",
    bcrypt__rounds=12,
    bcrypt__ident="2b"
)


def hash_password(password: str) -> str:
    return pwd_context.hash(password)


def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    """
    Generates a JWT token.
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})

    # Print data for debugging
    print(f"\n‚û°Ô∏è Creating access token with data: {to_encode}", flush=True)
    print(f"üîë Using SECRET_KEY: {SECRET_KEY[:5]}...", flush=True)

    token = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

    # Log token for debugging
    token_preview = token[:20] + "..." if len(token) > 20 else token
    print(f"üîñ Generated token: {token_preview}", flush=True)

    return token


def get_token_from_request(request: Request) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization –∏–ª–∏ –∏–∑ –∫—É–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ None, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    auth_header = request.headers.get("Authorization")
    if auth_header and auth_header.startswith("Bearer "):
        return auth_header.split(" ")[1]

    # –ï—Å–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –∫—É–∫–∏
    return request.cookies.get("token")


def get_admin_current_user(request: Request, db: Session = Depends(get_db)):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ JWT-—Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization –∏–ª–∏ –∏–∑ –∫—É–∫–∏.
    """
    token = get_token_from_request(request)

    if not token:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_email = payload.get("sub")
        user_role = payload.get("role")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∏–∑ —Ç–æ–∫–µ–Ω–∞
        if user_role == "admin":
            admin = db.query(Admin).filter(Admin.email == user_email).first()
            if admin:
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin.email} (ID {admin.id})", flush=True)
                return admin

        # –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –∏ —Å–º–æ—Ç—Ä–∏–º, –º–æ–∂–µ—Ç –ª–∏ –æ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = db.query(User).filter(User.email == user_email).first()
        if not user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–∫–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin = db.query(Admin).filter(Admin.email == user.email).first()
        if not admin:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )

        return admin

    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            headers={"WWW-Authenticate": "Bearer"}
        )


def get_current_user(request: Request, db: Session = Depends(get_db)):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization –∏–ª–∏ –∏–∑ –∫—É–∫–∏.
    """
    token = get_token_from_request(request)

    if not token:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ –≤ –∫—É–∫–∏", flush=True)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            headers={"WWW-Authenticate": "Bearer"}
        )

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_email = payload.get("sub")
        if not user_email:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"
            )
    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
            headers={"WWW-Authenticate": "Bearer"}
        )

    user = db.query(User).filter(User.email == user_email).first()
    if not user:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î", flush=True)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )

    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email} (ID {user.id})", flush=True)
    return user