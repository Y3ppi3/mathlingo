// src/hooks/useUser.ts
import { useState, useEffect, useCallback, useRef } from 'react';
import { useAuth } from '../context/AuthContext';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ LocalUserStorage
import {
    getLocalUserData,
    updateLocalUserData,
    USER_EVENTS
} from '../utils/LocalUserStorage';

interface User {
    id: number;
    username: string;
    email: string;
    avatarId?: number;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
const fetchWithRetry = async (url: string, options: RequestInit, maxRetries = 3): Promise<Response> => {
    let lastError: Error | unknown;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

            const fetchOptions = {
                ...options,
                signal: controller.signal
            };

            const response = await fetch(url, fetchOptions);
            clearTimeout(timeoutId);

            return response;
        } catch (err) {
            console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err);
            lastError = err;

            if (attempt < maxRetries) {
                // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                const delayMs = 1000 * Math.pow(2, attempt - 1);
                await new Promise(resolve => setTimeout(resolve, delayMs));
            }
        }
    }

    throw lastError || new Error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å');
};

export function useUser() {
    const { isAuthenticated } = useAuth();
    const [user, setUser] = useState<User | null>(getLocalUserData()); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const [loading, setLoading] = useState<boolean>(false);  // –ù–∞—á–∏–Ω–∞–µ–º —Å false –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    const [error, setError] = useState<string | null>(null);
    const [forceUpdate, setForceUpdate] = useState<number>(0);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const activeRequestRef = useRef<AbortController | null>(null);
    const isMountedRef = useRef<boolean>(true);

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fetchUser = useCallback(async () => {
        if (!isAuthenticated) {
            setUser(null);
            setLoading(false);
            return null;
        }

        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (activeRequestRef.current) {
            activeRequestRef.current.abort();
            activeRequestRef.current = null;
        }

        try {
            setLoading(true);
            const API_URL = import.meta.env.VITE_API_URL;

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const localUserData = getLocalUserData();
            if (localUserData) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', localUserData);
                setUser(localUserData);
                setError(null);
                setLoading(false);
                return localUserData;
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            const controller = new AbortController();
            activeRequestRef.current = controller;

            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é fetchWithRetry –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                const response = await fetchWithRetry(`${API_URL}/api/me`, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" },
                    signal: controller.signal
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
                if (!isMountedRef.current) return null;

                if (response.ok) {
                    const userData = await response.json();
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', userData);

                    if (!isMountedRef.current) return null;

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ updateLocalUserData
                    updateLocalUserData(userData);
                    setUser(userData);
                    setError(null);
                    return userData;
                } else {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...
                    if (process.env.NODE_ENV === 'development') {
                        console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
                        const testUser = {
                            id: 1,
                            username: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                            email: "test@example.com",
                            avatarId: 1
                        };

                        if (!isMountedRef.current) return null;

                        updateLocalUserData(testUser);
                        setUser(testUser);
                        setError(null);
                        return testUser;
                    } else {
                        setUser(null);
                        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                        return null;
                    }
                }
            } catch (err: any) {
                // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                if (err.name === 'AbortError') {
                    console.log('–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω');
                    return null;
                }

                console.error('‚ùå –û—à–∏–±–∫–∞ API:', err);

                if (!isMountedRef.current) return null;

                // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                if (process.env.NODE_ENV === 'development') {
                    const testUser = {
                        id: 1,
                        username: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                        email: "test@example.com",
                        avatarId: 1
                    };
                    updateLocalUserData(testUser);
                    setUser(testUser);
                    setError(null);
                    return testUser;
                } else {
                    setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                    return null;
                }
            }
        } finally {
            if (isMountedRef.current) {
                setLoading(false);
            }
            activeRequestRef.current = null;
        }
    }, [isAuthenticated, forceUpdate]);

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ–±–∞—É–Ω—Å–æ–º
    const updateDebounceTimer = useRef<NodeJS.Timeout | null>(null);

    const updateUserProfile = useCallback(async (data: {username?: string, avatarId?: number | null}) => {
        if (!user) {
            throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        }

        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (updateDebounceTimer.current) {
            clearTimeout(updateDebounceTimer.current);
            updateDebounceTimer.current = null;
        }

        return new Promise((resolve, reject) => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–¥–µ–±–∞—É–Ω—Å)
            updateDebounceTimer.current = setTimeout(async () => {
                // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (activeRequestRef.current) {
                    activeRequestRef.current.abort();
                }

                const controller = new AbortController();
                activeRequestRef.current = controller;

                try {
                    console.log("üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", data);
                    const API_URL = import.meta.env.VITE_API_URL;

                    const response = await fetchWithRetry(`${API_URL}/api/me/update`, {
                        method: "PUT",
                        credentials: "include",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(data),
                        signal: controller.signal
                    });

                    if (!isMountedRef.current) {
                        resolve({ success: false, canceled: true });
                        return;
                    }

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(errorData.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    const updatedUserData = await response.json();
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', updatedUserData);

                    if (!isMountedRef.current) {
                        resolve({ success: false, canceled: true });
                        return;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ updateLocalUserData
                    updateLocalUserData(updatedUserData);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    setUser(updatedUserData);

                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    setForceUpdate(prev => prev + 1);

                    resolve({ success: true, data: updatedUserData });
                } catch (err: any) {
                    if (err.name === 'AbortError') {
                        console.log('–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω');
                        resolve({ success: false, canceled: true });
                        return;
                    }

                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", err);
                    reject(err);
                } finally {
                    activeRequestRef.current = null;
                    updateDebounceTimer.current = null;
                }
            }, 300); // 300–º—Å –¥–µ–±–∞—É–Ω—Å
        });
    }, [user]);

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        const handleUserDataUpdate = (event: Event) => {
            const customEvent = event as CustomEvent<User>;
            setUser(customEvent.detail);
        };

        window.addEventListener(USER_EVENTS.DATA_UPDATED, handleUserDataUpdate);

        return () => {
            window.removeEventListener(USER_EVENTS.DATA_UPDATED, handleUserDataUpdate);
        };
    }, []);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        isMountedRef.current = true;

        // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
        if (!user && isAuthenticated) {
            fetchUser();
        }

        return () => {
            isMountedRef.current = false;

            // –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            if (activeRequestRef.current) {
                activeRequestRef.current.abort();
                activeRequestRef.current = null;
            }

            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–µ–±–∞—É–Ω—Å–∞
            if (updateDebounceTimer.current) {
                clearTimeout(updateDebounceTimer.current);
                updateDebounceTimer.current = null;
            }
        };
    }, [fetchUser, isAuthenticated, user]);

    // –î–æ—Å—Ç—É–ø–Ω—ã–π –∏–∑–≤–Ω–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const refreshUserData = useCallback(async () => {
        const userData = await fetchUser();
        if (userData) {
            setForceUpdate(prev => prev + 1);
        }
        return userData;
    }, [fetchUser]);

    return {
        user,
        loading,
        error,
        getAvatarUrl: (avatarId?: number) => avatarId ? `/avatars/${avatarId}.png` : undefined,
        updateUserProfile,
        refreshUserData
    };
}