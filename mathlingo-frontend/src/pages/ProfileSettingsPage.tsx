import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import Navbar from '../components/Navbar';
import { useUser } from '../hooks/useUser';
import AvatarSelector from '../components/AvatarSelector';
import Button from '../components/Button';
import Input from '../components/Input';
import { fetchWithRetry } from '../utils/fetchUtils';

const ProfileSettingsPage: React.FC = () => {
    const { user, loading, error, refreshUserData } = useUser();
    const navigate = useNavigate();
    const isMounted = useRef(true);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
    const [formData, setFormData] = useState({
        username: '',
        avatarId: undefined as number | undefined
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const [originalData, setOriginalData] = useState({
        username: '',
        avatarId: undefined as number | undefined
    });

    const [formError, setFormError] = useState('');
    const [isSaving, setIsSaving] = useState(false);
    const [successMessage, setSuccessMessage] = useState('');
    const [formKey, setFormKey] = useState(Date.now()); // –ö–ª—é—á –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        if (user) {
            const userData = {
                username: user.username,
                avatarId: user.avatarId
            };

            setFormData(userData);
            setOriginalData(userData);

            console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData);
        }
    }, [user]);

    // –í—ã—á–∏—Å–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
    const hasFormChanges = useCallback(() => {
        return formData.username !== originalData.username ||
            formData.avatarId !== originalData.avatarId;
    }, [formData, originalData]);

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    useEffect(() => {
        return () => {
            isMounted.current = false;
        };
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    const handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setFormData(prev => ({
            ...prev,
            username: e.target.value
        }));
    };

    const handleAvatarSelect = (id: number) => {
        setFormData(prev => ({
            ...prev,
            avatarId: id
        }));
    };

    // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º—ã –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const resetFormWithFreshData = async () => {
        if (!isMounted.current) return;

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
            const updatingFormFlag = 'updating_profile_form';
            if (sessionStorage.getItem(updatingFormFlag)) {
                console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                return;
            }

            sessionStorage.setItem(updatingFormFlag, '1');

            const freshUser = await refreshUserData();

            if (freshUser) {
                const freshData = {
                    username: freshUser.username,
                    avatarId: freshUser.avatarId
                };

                // –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
                setFormData(freshData);
                setOriginalData(freshData);
                setFormKey(Date.now());
            }

            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥
            sessionStorage.removeItem(updatingFormFlag);
        } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã:", err);
            sessionStorage.removeItem('updating_profile_form');
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!hasFormChanges()) {
            setSuccessMessage('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
            return;
        }

        setFormError('');
        setSuccessMessage('');
        setIsSaving(true);

        try {
            // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Ç–æ–ª—å–∫–æ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const updateData: {username?: string, avatarId?: number | null} = {};

            if (formData.username !== originalData.username) {
                updateData.username = formData.username;
            }

            if (formData.avatarId !== originalData.avatarId) {
                updateData.avatarId = formData.avatarId ?? null;
            }

            const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch —Å —É—á–µ—Ç–æ–º CSRF-–∑–∞—â–∏—Ç—ã
            const response = await fetch(`${API_URL}/api/me/update`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                },
                body: JSON.stringify(updateData),
                credentials: 'include', // –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É–∫–∏
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
            }

            const responseData = await response.json();

            // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage

            setSuccessMessage(responseData.message || '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');

            // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await refreshUserData();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', err);
            setFormError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        } finally {
            setIsSaving(false);
        }
    };    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    if (loading) {
        return (
            <div className="min-h-screen bg-gray-900 dark:bg-white">
                <Navbar />
                <div className="container mx-auto px-4 py-8 mt-16">
                    <div className="flex justify-center items-center h-96">
                        <div className="text-lg text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</div>
                    </div>
                </div>
            </div>
        );
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (error || !user) {
        return (
            <div className="min-h-screen bg-gray-900 dark:bg-white">
                <Navbar />
                <div className="container mx-auto px-4 py-8 mt-16">
                    <div className="bg-gray-800 dark:bg-gray-100 rounded-lg shadow-lg p-6 text-center">
                        <h2 className="text-xl text-red-500 mb-4">{error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}</h2>
                        <Link to="/dashboard">
                            <Button>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Button>
                        </Link>
                    </div>
                </div>
            </div>
        );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const isFormChanged = hasFormChanges();

    return (
        <div className="min-h-screen bg-gray-900 dark:bg-white">
            <Navbar />
            <div className="container mx-auto px-4 py-8 mt-16">
                <div className="bg-gray-800 dark:bg-gray-100 rounded-lg shadow-lg p-6">
                    <div className="flex items-center mb-6">
                        <button
                            className="text-indigo-400 hover:text-indigo-300 mr-2"
                            onClick={() => navigate('/profile')}
                        >
                            ‚Üê –ù–∞–∑–∞–¥
                        </button>
                        <h1 className="text-2xl font-bold text-white dark:text-gray-900">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h1>
                    </div>

                    {formError && (
                        <div className="mb-4 p-3 bg-red-900/50 dark:bg-red-100 text-red-200 dark:text-red-700 rounded">
                            {formError}
                        </div>
                    )}

                    {successMessage && (
                        <div className="mb-4 p-3 bg-green-900/50 dark:bg-green-100 text-green-200 dark:text-green-700 rounded">
                            {successMessage}
                        </div>
                    )}

                    {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö */}
                    <form key={formKey} onSubmit={handleSubmit} className="max-w-xl">
                        <div className="mb-6">
                            <h2 className="text-lg font-semibold mb-3 text-white dark:text-gray-900">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>

                            <div className="mb-4">
                                <label htmlFor="username-field" className="block mb-2 text-gray-300 dark:text-gray-700">
                                    –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                </label>
                                <Input
                                    id="username-field"
                                    name="username"
                                    type="text"
                                    value={formData.username}
                                    onChange={handleUsernameChange}
                                    required
                                />
                            </div>
                        </div>

                        <div className="mb-6">
                            <h2 className="text-lg font-semibold mb-3 text-white dark:text-gray-900">–ê–≤–∞—Ç–∞—Ä</h2>

                            <AvatarSelector
                                selectedAvatar={formData.avatarId}
                                onSelect={handleAvatarSelect}
                            />

                            <p className="text-sm text-gray-400 dark:text-gray-500 mt-2">
                                –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä –∏–∑ –≥–∞–ª–µ—Ä–µ–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.
                            </p>
                        </div>

                        <div className="mb-6">
                            <h2 className="text-lg font-semibold mb-3 text-white dark:text-gray-900">Email</h2>
                            <p className="text-gray-300 dark:text-gray-700 mb-2">
                                {user.email}
                            </p>
                            <p className="text-gray-400 dark:text-gray-500 text-sm">
                                –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å email –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
                            </p>
                        </div>

                        <div className="flex justify-end space-x-4">
                            <Button
                                variant="outline"
                                onClick={() => navigate('/profile')}
                                type="button"
                            >
                                –û—Ç–º–µ–Ω–∞
                            </Button>

                            <button
                                type="submit"
                                disabled={isSaving || !isFormChanged}
                                className={`px-4 py-2 rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2
                                ${isFormChanged
                                    ? 'bg-indigo-600 hover:bg-indigo-500 text-white focus:ring-indigo-500'
                                    : 'bg-gray-400 cursor-not-allowed text-white'}`}
                            >
                                {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default ProfileSettingsPage;