// src/pages/GameLauncherPage.tsx
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { api } from '../utils/api';
import Navbar from '../components/Navbar';
import Button from '../components/Button';

interface GameInfo {
    id: string;
    title: string;
    description: string;
    icon: string;
    mechanicType: '–ø–∞–¥–µ–Ω–∏–µ' | '—Å–±–æ—Ä–∫–∞' | '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è';
    subject: 'derivatives' | 'integrals';
    difficulty: number;
    estimatedTime: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥—Ä—É–ø–ø –∏–≥—Ä –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ
interface GameMechanicGroup {
    title: string;
    type: string;
    games: GameInfo[];
}

const GameLauncherPage: React.FC = () => {
    const { subjectId, mechanicType } = useParams<{ subjectId: string, mechanicType: string }>();
    const navigate = useNavigate();

    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [subjectName, setSubjectName] = useState('');
    const [games, setGames] = useState<GameInfo[]>([]);
    const [selectedGame, setSelectedGame] = useState<GameInfo | null>(null);
    const [gameGroups, setGameGroups] = useState<GameMechanicGroup[]>([]);

    useEffect(() => {
        const fetchSubjectAndGames = async () => {
            if (!subjectId) return;

            try {
                setLoading(true);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
                const subjectResponse = await api.get(`/api/subjects/${subjectId}`);
                setSubjectName(subjectResponse.data.name);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É —Å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–µ–º—É –≤ –∫–æ–Ω—Å–æ–ª–∏
                let subjectTheme: 'derivatives' | 'integrals';

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º—ã
                const subjectNameLower = subjectResponse.data.name.toLowerCase();
                if (subjectNameLower.includes('–ø—Ä–æ–∏–∑–≤–æ–¥–Ω') ||
                    subjectNameLower.includes('–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü') ||
                    subjectId === '1') {
                    subjectTheme = 'derivatives';
                    console.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞: –ü–†–û–ò–ó–í–û–î–ù–´–ï (id: ${subjectId})`);
                } else {
                    subjectTheme = 'integrals';
                    console.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞: –ò–ù–¢–ï–ì–†–ê–õ–´ (id: ${subjectId})`);
                }

                // –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –±—ã –∑–∞–≥—Ä—É–∂–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä —Å —Å–µ—Ä–≤–µ—Ä–∞
                // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —ç—Ç–æ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                const availableGames: GameInfo[] = [
                    {
                        id: 'deriv-fall',
                        title: 'DerivFall',
                        description: '–ù–∞—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–∞–¥–∞—é—â–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–∞!',
                        icon: 'üìâ',
                        mechanicType: '–ø–∞–¥–µ–Ω–∏–µ',
                        subject: 'derivatives',
                        difficulty: 3,
                        estimatedTime: 5
                    },
                    {
                        id: 'integral-builder',
                        title: 'IntegralBuilder',
                        description: '–°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π!',
                        icon: 'üß©',
                        mechanicType: '—Å–±–æ—Ä–∫–∞',
                        subject: 'integrals',
                        difficulty: 4,
                        estimatedTime: 10
                    },
                    {
                        id: 'math-lab-derivatives',
                        title: 'MathLab: –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ',
                        description: '–ò–∑—É—á–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏ —Ä–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏!',
                        icon: 'üî¨',
                        mechanicType: '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
                        subject: 'derivatives',
                        difficulty: 3,
                        estimatedTime: 15
                    },
                    {
                        id: 'math-lab-integrals',
                        title: 'MathLab: –ò–Ω—Ç–µ–≥—Ä–∞–ª—ã',
                        description: '–ò–∑—É—á–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ —Ä–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏!',
                        icon: 'üß™',
                        mechanicType: '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
                        subject: 'integrals',
                        difficulty: 4,
                        estimatedTime: 15
                    }
                ];

                // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ —Ç–µ–º–µ
                let filteredGames = availableGames.filter(game => game.subject === subjectTheme);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–≥—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
                if (filteredGames.length === 0) {
                    console.warn(`–ù–µ—Ç –∏–≥—Ä –¥–ª—è —Ç–µ–º—ã ${subjectTheme}!`);
                } else {
                    console.log(`–ù–∞–π–¥–µ–Ω–æ ${filteredGames.length} –∏–≥—Ä –¥–ª—è —Ç–µ–º—ã ${subjectTheme}`);
                }

                // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –º–µ—Ö–∞–Ω–∏–∫–∏, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
                if (mechanicType) {
                    const mechanicMap: Record<string, string> = {
                        'fall': '–ø–∞–¥–µ–Ω–∏–µ',
                        'builder': '—Å–±–æ—Ä–∫–∞',
                        'lab': '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è'
                    };

                    const mappedMechanicType = mechanicMap[mechanicType] as '–ø–∞–¥–µ–Ω–∏–µ' | '—Å–±–æ—Ä–∫–∞' | '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è';

                    if (mappedMechanicType) {
                        filteredGames = filteredGames.filter(game => game.mechanicType === mappedMechanicType);
                    }
                }

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ —Ç–∏–ø—É –º–µ—Ö–∞–Ω–∏–∫–∏
                const groupedGames: GameMechanicGroup[] = [];

                // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–µ—Ö–∞–Ω–∏–∫–∏
                const mechanicTypes = [...new Set(filteredGames.map(game => game.mechanicType))];

                mechanicTypes.forEach(type => {
                    const gamesInGroup = filteredGames.filter(game => game.mechanicType === type);

                    let title = '';
                    switch(type) {
                        case '–ø–∞–¥–µ–Ω–∏–µ':
                            title = '–ò–≥—Ä—ã –Ω–∞ –±—ã—Å—Ç—Ä—É—é —Ä–µ–∞–∫—Ü–∏—é';
                            break;
                        case '—Å–±–æ—Ä–∫–∞':
                            title = '–ò–≥—Ä—ã –Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ';
                            break;
                        case '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è':
                            title = '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–≥—Ä—ã';
                            break;
                        default:
                            title = '–î—Ä—É–≥–∏–µ –∏–≥—Ä—ã';
                    }

                    groupedGames.push({
                        title,
                        type,
                        games: gamesInGroup
                    });
                });

                setGames(filteredGames);
                setGameGroups(groupedGames);

                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–≥—Ä–∞, —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º –µ—ë
                if (filteredGames.length === 1) {
                    setSelectedGame(filteredGames[0]);
                }

            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            } finally {
                setLoading(false);
            }
        };

        fetchSubjectAndGames();
    }, [subjectId, mechanicType]);

    const handleGameSelect = (game: GameInfo) => {
        setSelectedGame(game);
    };

    const handleStartGame = () => {
        if (!selectedGame) return;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã
        navigate(`/subject/${subjectId}/game/${selectedGame.id}`);
    };

    const handleBack = () => {
        navigate(`/subject/${subjectId}/map`);
    };

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-900 dark:bg-gray-100">
                <Navbar />
                <div className="container mx-auto px-4 py-8 mt-16">
                    <div className="flex justify-center items-center h-96">
                        <div className="text-lg text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    </div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="min-h-screen bg-gray-900 dark:bg-gray-100">
                <Navbar />
                <div className="container mx-auto px-4 py-8 mt-16">
                    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 text-center">
                        <h2 className="text-xl text-red-500 mb-4">{error}</h2>
                        <Button onClick={handleBack}>
                            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–µ
                        </Button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-900 dark:bg-gray-100">
            <Navbar />
            <div className="container mx-auto px-4 py-8 mt-16">
                <div className="bg-gray-800 dark:bg-white rounded-lg shadow-lg p-6">
                    <div className="mb-6">
                        <Button
                            variant="outline"
                            onClick={handleBack}
                            className="mb-4"
                        >
                            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–µ
                        </Button>

                        <h1 className="text-2xl font-bold text-white dark:text-gray-900">
                            {mechanicType
                                ? `–ò–≥—Ä—ã —Ç–∏–ø–∞ "${mechanicType}" –ø–æ —Ç–µ–º–µ "${subjectName}"`
                                : `–ò–≥—Ä—ã –ø–æ —Ç–µ–º–µ "${subjectName}"`}
                        </h1>
                    </div>

                    {games.length === 0 ? (
                        <div className="text-center py-8">
                            <p className="text-gray-500 mb-4">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
                            <Button onClick={handleBack}>
                                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–µ
                            </Button>
                        </div>
                    ) : (
                        <div>
                            {/* –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã */}
                            {gameGroups.map((group) => (
                                <div key={group.type} className="mb-8">
                                    <h2 className="text-xl font-semibold mb-4 text-gray-200 dark:text-gray-800">{group.title}</h2>
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {group.games.map((game) => (
                                            <div
                                                key={game.id}
                                                className={`
                                                    p-6 rounded-lg cursor-pointer transition-all transform hover:scale-105
                                                    ${selectedGame?.id === game.id
                                                    ? 'bg-indigo-900 dark:bg-indigo-100 border-2 border-indigo-500'
                                                    : 'bg-gray-700 dark:bg-gray-50 border border-gray-600 dark:border-gray-200 hover:shadow-lg'}
                                                `}
                                                onClick={() => handleGameSelect(game)}
                                            >
                                                <div className="flex items-center mb-3">
                                                    <div className="text-3xl mr-3">{game.icon}</div>
                                                    <h3 className="text-xl font-semibold text-white dark:text-gray-900">{game.title}</h3>
                                                </div>
                                                <p className="text-gray-300 dark:text-gray-600 mb-4">{game.description}</p>
                                                <div className="flex justify-between text-sm">
                                                    <span className="text-gray-400 dark:text-gray-500">–°–ª–æ–∂–Ω–æ—Å—Ç—å: {Array(game.difficulty).fill('‚òÖ').join('')}</span>
                                                    <span className="text-gray-400 dark:text-gray-500">~{game.estimatedTime} –º–∏–Ω</span>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            ))}

                            <div className="flex justify-center">
                                <Button
                                    onClick={handleStartGame}
                                    disabled={!selectedGame}
                                    className="px-8 py-3 text-lg"
                                >
                                    {selectedGame ? `–ù–∞—á–∞—Ç—å –∏–≥—Ä—É "${selectedGame.title}"` : '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É'}
                                </Button>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default GameLauncherPage;