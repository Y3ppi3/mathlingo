// src/components/games/DerivFall.tsx
import React, { useState, useEffect, useRef, useCallback } from 'react';
import Button from '../Button';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é
interface DerivativeProblem {
  id: string;
  problem: string;
  options: string[];
  answer: string;
  difficulty: 'easy' | 'medium' | 'hard';
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface DerivFallProps {
  difficulty?: number;
  timeLimit?: number;
  problemsSource?: DerivativeProblem[];
  onComplete?: (score: number, maxScore: number) => void;
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
const DEFAULT_PROBLEMS: DerivativeProblem[] = [
  {
    id: "d1",
    problem: "y'(x) = x¬≥",
    options: ["3x¬≤", "3x‚Å¥", "4x¬≥", "x¬≤"],
    answer: "3x¬≤",
    difficulty: "medium"
  },
  {
    id: "d2",
    problem: "y'(x) = x‚Å∑",
    options: ["7x‚Å∂", "6x‚Åµ", "7x‚Å∏", "x‚Å∂"],
    answer: "7x‚Å∂",
    difficulty: "medium"
  },
  {
    id: "d3",
    problem: "y'(x) = x‚Åª¬≤",
    options: ["-2x‚Åª¬≥", "2/x¬≥", "-2/x¬≥", "-x‚Åª¬≥"],
    answer: "-2x‚Åª¬≥",
    difficulty: "hard"
  },
  {
    id: "d4",
    problem: "y'(x) = ‚àöx",
    options: ["1/(2‚àöx)", "2‚àöx", "1/2‚àöx", "‚àöx/2"],
    answer: "1/(2‚àöx)",
    difficulty: "hard"
  },
  {
    id: "d5",
    problem: "y'(x) = (5x+2)‚Åª¬≥",
    options: ["-15(5x+2)‚Åª‚Å¥", "-3(5x+2)‚Åª‚Å¥", "-5(5x+2)‚Åª‚Å¥", "-15(5x+2)‚Åª¬≤"],
    answer: "-15(5x+2)‚Åª‚Å¥",
    difficulty: "hard"
  },
  {
    id: "d6",
    problem: "y'(x) = sin(x)",
    options: ["cos(x)", "-sin(x)", "tan(x)", "sec¬≤(x)"],
    answer: "cos(x)",
    difficulty: "easy"
  },
  {
    id: "d7",
    problem: "y'(x) = e^x",
    options: ["e^x", "xe^x", "e^(x-1)", "ln(x)e^x"],
    answer: "e^x",
    difficulty: "easy"
  },
  {
    id: "d8",
    problem: "y'(x) = ln(x)",
    options: ["1/x", "ln(x)/x", "x^(-1)", "1/ln(x)"],
    answer: "1/x",
    difficulty: "medium"
  },
  {
    id: "d9",
    problem: "y'(x) = cos(x)",
    options: ["-sin(x)", "sin(x)", "-cos(x)", "tan(x)"],
    answer: "-sin(x)",
    difficulty: "easy"
  },
  {
    id: "d10",
    problem: "y'(x) = tan(x)",
    options: ["sec¬≤(x)", "-csc¬≤(x)", "1/cos¬≤(x)", "sin(x)/cos¬≤(x)"],
    answer: "sec¬≤(x)",
    difficulty: "medium"
  },
  {
    id: "d11",
    problem: "y'(x) = x¬≤ + 3x",
    options: ["2x + 3", "2x¬≤ + 3", "x + 3", "2x + 3x¬≤"],
    answer: "2x + 3",
    difficulty: "easy"
  },
  {
    id: "d12",
    problem: "y'(x) = x¬∑sin(x)",
    options: ["sin(x) + x¬∑cos(x)", "x¬∑cos(x)", "sin(x) - x¬∑cos(x)", "cos(x) + x¬∑sin(x)"],
    answer: "sin(x) + x¬∑cos(x)",
    difficulty: "medium"
  }
];

const DerivFall: React.FC<DerivFallProps> = ({
                                               difficulty = 3,
                                               timeLimit = 60, // 60 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                               problemsSource,
                                               onComplete
                                             }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–¥–∞—é—â–∏—Ö –ø—Ä–æ–±–ª–µ–º
  const [problems, setProblems] = useState<Array<DerivativeProblem & {
    id: string;
    left: number;
    top: number;
    answered: boolean;
    correct?: boolean;
  }>>([]);

  // –ò–≥—Ä–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [score, setScore] = useState(0);
  const [lives, setLives] = useState(3);
  const [gameOver, setGameOver] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);
  const [gamePaused, setGamePaused] = useState(false);
  const [difficultyLevel, setDifficultyLevel] = useState<'easy' | 'medium' | 'hard'>('medium');
  const [speed, setSpeed] = useState(3000); // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
  const [timeRemaining, setTimeRemaining] = useState(timeLimit);
  const [problemBank, setProblemBank] = useState<DerivativeProblem[]>(DEFAULT_PROBLEMS);
  const [problemsCompleted, setProblemsCompleted] = useState(0);
  const [countdownActive, setCountdownActive] = useState(false);
  const [countdown, setCountdown] = useState(3);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackMessage, setFeedbackMessage] = useState('');
  const [feedbackType, setFeedbackType] = useState<'success' | 'error'>('success');

  // –°—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ DOM –∏ —Ç–∞–π–º–µ—Ä–∞–º
  const gameAreaRef = useRef<HTMLDivElement>(null);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  const gameIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const problemTimeoutsRef = useRef<{[key: string]: NodeJS.Timeout}>({});

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  const setFeedback = useCallback((message: string, type: 'success' | 'error') => {
    setFeedbackMessage(message);
    setFeedbackType(type);
    setShowFeedback(true);

    // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
      console.log("üéÆ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é");

      const randomIndex = Math.floor(Math.random() * problemBank.length);
      const problem = problemBank[randomIndex];
      const newProblemId = `prob-${Date.now()}-${Math.random().toString(36).substring(2, 5)}`;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      const leftPosition = getDistributedPosition();

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é
      setProblems(prev => [
        ...prev,
        {
          ...problem,
          id: newProblemId,
          left: leftPosition,
          top: 0,
          answered: false
        }
      ]);

      console.log(`‚úÖ –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${problem.problem}`);

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–µ—ë
      problemTimeoutsRef.current[newProblemId] = setTimeout(() => {
        setProblems(prev => {
          const problemExists = prev.find(p => p.id === newProblemId && !p.answered);
          if (problemExists) {
            setLives(l => {
              const newLives = l - 1;
              if (newLives <= 0) {
                endGame();
              }
              return newLives;
            });
            setFeedback("–£–ø—É—â–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞!", "error");
          }
          return prev.filter(p => p.id !== newProblemId);
        });
        delete problemTimeoutsRef.current[newProblemId];
      }, speed + 2000);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á —Å –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        const interval = difficultyLevel === 'hard' ? 2500 :
            difficultyLevel === 'medium' ? 3500 : 4500;

        console.log(`üéÆ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á: ${interval}ms`);

        gameIntervalRef.current = setInterval(() => {
          if (!gamePaused) {
            createProblem();
          }
        }, interval);
      }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

    }, 800);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–±–ª–µ–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö
  useEffect(() => {
    console.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á");

    if (problemsSource && problemsSource.length > 0) {
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${problemsSource.length} –∑–∞–¥–∞—á –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`);
      setProblemBank(problemsSource);
    } else {
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º ${DEFAULT_PROBLEMS.length} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–¥–∞—á`);
      setProblemBank([...DEFAULT_PROBLEMS]);
    }

    return () => {
      console.log("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á");
    };
  }, [problemsSource]); // DEFAULT_PROBLEMS –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –Ω–µ –Ω—É–∂–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  useEffect(() => {
    console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${difficulty}`);
    if (difficulty <= 2) {
      setDifficultyLevel('easy');
      setSpeed(6000);
    } else if (difficulty >= 5) {
      setDifficultyLevel('hard');
      setSpeed(2500);
    } else {
      setDifficultyLevel('medium');
      setSpeed(4000);
    }
  }, [difficulty]);

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
  const endGame = useCallback(() => {
    console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã");
    setGameOver(true);
    setGameStarted(false);
    setGamePaused(false);

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }

    if (gameIntervalRef.current) {
      clearInterval(gameIntervalRef.current);
      gameIntervalRef.current = null;
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∑–∞–¥–∞—á
    Object.values(problemTimeoutsRef.current).forEach(clearTimeout);
    problemTimeoutsRef.current = {};

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if (onComplete) {
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—á–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —á–∞—Å—Ç–æ—Ç—ã –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
      const maxPossibleScore = Math.max(10, problemsCompleted * 10); // –ú–∏–Ω–∏–º—É–º 10 –æ—á–∫–æ–≤
      onComplete(score, maxPossibleScore);
    }
  }, [score, problemsCompleted, onComplete]);

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–¥–∞—é—â—É—é –∑–∞–¥–∞—á—É
  const createProblem = useCallback(() => {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
    console.log("üí° createProblem –≤—ã–∑–≤–∞–Ω–∞", { lives, gameOver, gameStarted, gamePaused, problemBankLength: problemBank.length });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
    if (lives <= 0) {
      console.log("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ: –Ω–µ—Ç –∂–∏–∑–Ω–µ–π");
      return;
    }

    if (gameOver) {
      console.log("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ: –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞");
      return;
    }

    if (!gameStarted) {
      console.log("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ: –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞");
      return;
    }

    if (gamePaused) {
      console.log("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ: –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ");
      return;
    }

    if (problemBank.length === 0) {
      console.error("‚ùå No problems available!");
      setFeedback("–û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "error");
      return;
    }

    console.log(`üîç –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficultyLevel}, –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞—á: ${problemBank.length}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    let filteredProblems = problemBank.filter(p => {
      if (difficultyLevel === 'easy') return p.difficulty === 'easy';
      if (difficultyLevel === 'medium') return p.difficulty === 'easy' || p.difficulty === 'medium';
      return true; // –î–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–µ—Ä–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    });

    console.log(`üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á: ${filteredProblems.length}`);

    if (filteredProblems.length === 0) {
      console.warn(`‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ '${difficultyLevel}' –∑–∞–¥–∞—á –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å!`);
      console.log("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏");
      filteredProblems = [...problemBank];

      if (filteredProblems.length === 0) {
        console.error("‚ùå –í—Å—ë –µ—â—ë –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á!");
        setFeedback("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!", "error");
        return;
      }
    }

    const randomIndex = Math.floor(Math.random() * filteredProblems.length);
    const problem = filteredProblems[randomIndex];
    const newProblemId = `prob-${Date.now()}-${Math.random().toString(36).substring(2, 5)}`;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getDistributedPosition –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ Math.random()
    const getDistributedPosition = () => {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á
      const currentPositions = problems.map(p => p.left);

      // –ü—Ä–æ–±—É–µ–º 5 —Ä–∞–∑ –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é, –Ω–µ –±–ª–∏–∑–∫—É—é –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      for (let i = 0; i < 5; i++) {
        const sector = Math.floor(Math.random() * 4); // 4 —Å–µ–∫—Ç–æ—Ä–∞
        const newPos = (sector * 20) + (Math.random() * 15);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ä—è–¥–æ–º –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á (–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –º–µ–Ω–µ–µ 20%)
        const isTooClose = currentPositions.some(pos => Math.abs(pos - newPos) < 20);
        if (!isTooClose) {
          return newPos; // –ù–∞—à–ª–∏ —Ö–æ—Ä–æ—à—É—é –ø–æ–∑–∏—Ü–∏—é
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à—É—é –ø–æ–∑–∏—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
      return Math.random() * 70;
    };

    const leftPosition = getDistributedPosition();

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    console.log(`‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É ${newProblemId}: ${problem.problem}`);

    // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setProblems(prev => {
      const newProblems = [...prev, {
        ...problem,
        id: newProblemId,
        left: leftPosition,
        top: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        answered: false
      }];
      console.log(`üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${newProblems.length}`);
      return newProblems;
    });

    // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∞ –≤—ã–ø–∞–¥–µ—Ç –∏–∑ –ø–æ–ª—è –∑—Ä–µ–Ω–∏—è
    problemTimeoutsRef.current[newProblemId] = setTimeout(() => {
      console.log(`‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ${newProblemId} —Å—Ä–∞–±–æ—Ç–∞–ª`);

      setProblems(prev => {
        const problemExists = prev.find(p => p.id === newProblemId && !p.answered);
        if (problemExists) {
          // –ó–∞–¥–∞—á–∞ —É–ø–∞–ª–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
          console.log(`‚ùå –ó–∞–¥–∞—á–∞ ${newProblemId} —É–ø–∞–ª–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞`);
          setLives(l => {
            const newLives = l - 1;
            if (newLives <= 0) {
              console.log("‚ò†Ô∏è –í—Å–µ –∂–∏–∑–Ω–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è");
              endGame();
            }
            return newLives;
          });

          setFeedback("–£–ø—É—â–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞!", "error");
        }
        return prev.filter(p => p.id !== newProblemId);
      });

      // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
      delete problemTimeoutsRef.current[newProblemId];
    }, speed + 2000); // –í—Ä–µ–º—è –ø–∞–¥–µ–Ω–∏—è + –±—É—Ñ–µ—Ä
  }, [difficultyLevel, problemBank, lives, gameOver, gameStarted, gamePaused, speed, setFeedback, endGame]);

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
  const handleAnswerSelect = useCallback((problemId: string, selectedOption: string, correctAnswer: string) => {
    // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—É—é
    setProblems(prev =>
        prev.map(p => p.id === problemId ?
            {...p, answered: true, correct: selectedOption === correctAnswer} : p)
    );

    // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
    if (problemTimeoutsRef.current[problemId]) {
      clearTimeout(problemTimeoutsRef.current[problemId]);
      delete problemTimeoutsRef.current[problemId];
    }

    if (selectedOption === correctAnswer) {
      console.log(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ${problemId}`);
      setScore(s => s + 10);
      setProblemsCompleted(p => p + 1);
      setFeedback("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 –æ—á–∫–æ–≤", "success");
    } else {
      console.log(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ ${problemId}`);
      setFeedback(`–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}`, "error");
    }

    // –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
      setProblems(prev => prev.filter(p => p.id !== problemId));
    }, 800);
  }, [setFeedback]);

  // –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É
  const resetGame = useCallback(() => {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }

    if (gameIntervalRef.current) {
      clearInterval(gameIntervalRef.current);
      gameIntervalRef.current = null;
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∑–∞–¥–∞—á
    Object.values(problemTimeoutsRef.current).forEach(clearTimeout);
    problemTimeoutsRef.current = {};

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setProblems([]);
    setScore(0);
    setLives(3);
    setGameOver(false);
    setGameStarted(false);
    setGamePaused(false);
    setTimeRemaining(timeLimit);
    setProblemsCompleted(0);
    setShowFeedback(false);
  }, [timeLimit]);

  // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
  const startGame = useCallback(() => {
    console.log("üí° startGame –≤—ã–∑–≤–∞–Ω–∞, gameStarted =", gameStarted);

    // –ü–æ–≤—Ç–æ—Ä–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameStarted, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setGameStarted(true);
    setGamePaused(false);

    // –û—á–∏—Å—Ç–∏–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–π
    if (timerRef.current) clearInterval(timerRef.current);
    if (gameIntervalRef.current) clearInterval(gameIntervalRef.current);
    Object.values(problemTimeoutsRef.current).forEach(clearTimeout);
    problemTimeoutsRef.current = {};

    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    switch(difficultyLevel) {
      case 'easy': setSpeed(6000); break;
      case 'medium': setSpeed(4000); break;
      case 'hard': setSpeed(2500); break;
    }

    // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –∏–≥—Ä—ã
    timerRef.current = setInterval(() => {
      if (!gamePaused) {
        setTimeRemaining(prev => {
          if (prev <= 1) {
            console.log("‚è±Ô∏è –í—Ä–µ–º—è –≤—ã—à–ª–æ, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è");
            endGame();
            return 0;
          }
          return prev - 1;
        });
      }
    }, 1000);

    // –í–ê–ñ–ù–û: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É –∫ —Å—Ç–µ–π—Ç—É gameStarted —Ç—É—Ç
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é (–Ω–µ —á–µ—Ä–µ–∑ createProblem)
    // —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ gameStarted
    console.log("üéÆ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é");

    const randomIndex = Math.floor(Math.random() * problemBank.length);
    const problem = problemBank[randomIndex];
    const newProblemId = `prob-${Date.now()}-${Math.random().toString(36).substring(2, 5)}`;
    const leftPosition = Math.random() * 70;

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é
    setProblems(prev => [
      ...prev,
      {
        ...problem,
        id: newProblemId,
        left: leftPosition,
        top: 0,
        answered: false
      }
    ]);

    console.log(`‚úÖ –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${problem.problem}`);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–µ—ë
    problemTimeoutsRef.current[newProblemId] = setTimeout(() => {
      setProblems(prev => {
        const problemExists = prev.find(p => p.id === newProblemId && !p.answered);
        if (problemExists) {
          setLives(l => {
            const newLives = l - 1;
            if (newLives <= 0) {
              endGame();
            }
            return newLives;
          });
          setFeedback("–£–ø—É—â–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞!", "error");
        }
        return prev.filter(p => p.id !== newProblemId);
      });
      delete problemTimeoutsRef.current[newProblemId];
    }, speed + 2000);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á
    const interval = difficultyLevel === 'hard' ? 2500 :
        difficultyLevel === 'medium' ? 3500 : 4500;

    console.log(`üéÆ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á: ${interval}ms`);

    gameIntervalRef.current = setInterval(() => {
      if (!gamePaused) {
        createProblem();
      }
    }, interval);

  }, [difficultyLevel, problemBank, speed, setFeedback, endGame]);

  // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
  const startGameWithCountdown = useCallback(() => {
    resetGame();
    setCountdownActive(true);
    setCountdown(3);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
    const countdownTimer = setInterval(() => {
      setCountdown(prev => {
        const newCount = prev - 1;
        if (newCount <= 0) {
          clearInterval(countdownTimer);
          setCountdownActive(false);

          // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameStarted –≤ true –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º startGame
          setGameStarted(true);

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
          setTimeout(() => {
            startGame();
          }, 100);

          return 0;
        }
        return newCount;
      });
    }, 1000);
  }, [resetGame, startGame]);

  // –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É
  const togglePause = useCallback(() => {
    setGamePaused(prev => !prev);
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log("–†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤");
      if (timerRef.current) clearInterval(timerRef.current);
      if (gameIntervalRef.current) clearInterval(gameIntervalRef.current);

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∑–∞–¥–∞—á
      Object.values(problemTimeoutsRef.current).forEach(clearTimeout);
    };
  }, []);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (seconds: number): string => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
  };

  return (
      <div className="w-full h-full flex flex-col bg-gray-700 dark:bg-gray-200 rounded-lg overflow-hidden transition-colors">
        {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
        <div className="px-4 py-3 flex justify-between items-center bg-gray-600 dark:bg-gray-300 border-b border-gray-500 dark:border-gray-400 transition-colors">
          <div className="flex items-center space-x-6">
            <div className="text-gray-100 dark:text-gray-900 font-medium transition-colors">
              –°—á–µ—Ç: <span className="font-bold">{score}</span>
            </div>
            <div className="flex items-center">
              <span className="text-gray-100 dark:text-gray-900 mr-2 transition-colors">–ñ–∏–∑–Ω–∏:</span>
              <span className="text-red-500 dark:text-red-600 transition-colors">{Array(lives).fill('‚ù§Ô∏è').join('')}</span>
            </div>

            <div className="text-yellow-500 dark:text-yellow-600 font-medium transition-colors">
              –í—Ä–µ–º—è: {formatTime(timeRemaining)}
            </div>
          </div>

          <div className="flex items-center space-x-3">
            {gameStarted && !gameOver && (
                <button
                    className={`px-3 py-1 rounded-md text-sm font-medium ${
                        gamePaused
                            ? 'bg-green-700 dark:bg-green-200 text-white dark:text-gray-900'
                            : 'bg-amber-700 dark:bg-amber-200 text-white dark:text-gray-900'
                    } transition-colors`}
                    onClick={togglePause}
                >
                  {gamePaused ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ü–∞—É–∑–∞'}
                </button>
            )}

            <div className="px-2 py-1 rounded-md text-sm font-medium bg-gray-500 dark:bg-gray-400 text-white dark:text-gray-900 transition-colors">
              {difficultyLevel === 'easy' ? '–õ–µ–≥–∫–∏–π' : difficultyLevel === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–°–ª–æ–∂–Ω—ã–π'}
            </div>
          </div>
        </div>

        {/* –ò–≥—Ä–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å */}
        <div
            ref={gameAreaRef}
            className="relative flex-1 overflow-hidden bg-gray-700 dark:bg-gray-200 transition-colors"
            style={{height: '500px', position: 'relative'}} // –î–æ–±–∞–≤–ª—è–µ–º position: 'relative'
        >
          {/* –ü–∞–¥–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏ */}
          {problems.map(problem => (
              !problem.answered ? (
                  <div
                      key={problem.id}
                      className="absolute bg-blue-700 dark:bg-blue-200 p-3 rounded-lg shadow-lg text-center transition-colors"
                      style={{
                        left: `${problem.left}%`,
                        top: '-80px',
                        width: '250px', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                        transform: `translateX(-50%)`, // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–∏
                        animation: gamePaused ? 'none' : `fallNew ${speed / 1000}s linear forwards`,
                        zIndex: parseInt(problem.id.split('-')[1]) % 10, // –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ z-index
                      }}
                  >
                    <div className="text-lg mb-2 font-medium text-white dark:text-gray-900 transition-colors">
                      {problem.problem}
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                      {problem.options.map((option, idx) => (
                          <button
                              key={idx}
                              className="bg-purple-700 dark:bg-purple-200 text-white dark:text-gray-900 hover:bg-purple-600 dark:hover:bg-purple-300 px-2 py-1 rounded-lg transition-colors"
                              onClick={() => handleAnswerSelect(problem.id, option, problem.answer)}
                              disabled={gamePaused}
                          >
                            {option}
                          </button>
                      ))}
                    </div>
                  </div>
              ) : (
                  <div
                      key={problem.id}
                      className="absolute p-3 rounded-lg shadow-lg text-center w-64 transition-colors"
                      style={{
                        left: `${problem.left}%`,
                        top: `${problem.top}%`,
                        animation: 'fadeOut 0.8s forwards',
                        backgroundColor: problem.correct
                            ? 'var(--bg-green-700, rgb(21, 128, 61))'
                            : 'var(--bg-red-700, rgb(185, 28, 28))',
                        color: 'white'
                      }}
                  >
                    <div className="text-lg mb-2 font-medium text-white dark:text-gray-900 transition-colors">
                      {problem.problem}
                    </div>
                    <div className="font-bold">
                      {problem.correct ? '–í–µ—Ä–Ω–æ!' : `–û—Ç–≤–µ—Ç: ${problem.answer}`}
                    </div>
                  </div>
              )
          ))}

          {/* –ù–∞–ª–æ–∂–µ–Ω–∏–µ –ø–∞—É–∑—ã */}
          {gamePaused && gameStarted && !gameOver && (
              <div
                  className="absolute inset-0 bg-black bg-opacity-50 dark:bg-opacity-70 flex flex-col items-center justify-center z-30 transition-colors">
                <div className="text-4xl font-bold text-white mb-6">–ü–ê–£–ó–ê</div>
                <Button
                    onClick={togglePause}
                    variant="primary"
                >
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                </Button>
              </div>
          )}

          {/* –≠–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã */}
          {gameOver && (
              <div
                  className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-80 dark:bg-opacity-70 z-20 transition-colors">
                <div
                    className="text-center bg-gray-600 dark:bg-gray-300 p-6 rounded-lg shadow-xl max-w-md mx-auto transition-colors">
                  <h2 className="text-2xl mb-4 font-bold text-white dark:text-gray-900 transition-colors">–ò–≥—Ä–∞
                    –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
                  <p className="mb-6 text-xl text-white dark:text-gray-900 transition-colors">
                    –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: <span className="font-bold">{score}</span>
                  </p>
                  <p className="mb-6 text-gray-300 dark:text-gray-700 transition-colors">
                    –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: <span className="font-bold">{problemsCompleted}</span>
                  </p>
                  <Button
                      onClick={startGameWithCountdown}
                  >
                    –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
                  </Button>
                </div>
              </div>
          )}

          {/* –≠–∫—Ä–∞–Ω –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã */}
          {!gameStarted && !gameOver && !countdownActive && (
              <div className="absolute inset-0 flex items-center justify-center z-20">
                <div
                    className="text-center bg-gray-600 dark:bg-gray-300 p-6 rounded-lg shadow-xl max-w-md mx-auto transition-colors">
                  <h2 className="text-xl mb-4 font-bold text-white dark:text-gray-900 transition-colors">
                    –ò–≥—Ä–∞ "–ü–∞–¥–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ"
                  </h2>
                  <p className="mb-4 text-gray-200 dark:text-gray-800 transition-colors">
                    –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ —É–ø–∞–¥—É—Ç!
                  </p>
                  <p className="mb-6 text-gray-200 dark:text-gray-800 transition-colors">
                    –°–ª–æ–∂–Ω–æ—Å—Ç—å: <span className="font-medium">
                  {difficultyLevel === 'easy' ? '–õ–µ–≥–∫–∞—è' : difficultyLevel === 'medium' ? '–°—Ä–µ–¥–Ω—è—è' : '–°–ª–æ–∂–Ω–∞—è'}
                </span>
                  </p>
                  <div className="mb-4 p-4 bg-gray-500 dark:bg-gray-400 rounded-lg transition-colors">
                    <h3 className="font-bold text-white dark:text-gray-900 mb-2 transition-colors">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</h3>
                    <ul className="text-left text-gray-200 dark:text-gray-800 list-disc pl-5 transition-colors">
                      <li>–í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</li>
                      <li>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–¥–∞—á–∞ —É–ø–∞–¥–µ—Ç</li>
                      <li>–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç +10 –æ—á–∫–æ–≤</li>
                      <li>3 —É–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ = –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã</li>
                    </ul>
                  </div>
                  <Button
                      onClick={startGameWithCountdown}
                  >
                    –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                  </Button>
                </div>
              </div>
          )}

          {/* –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º */}
          {countdownActive && (
              <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-80 z-30">
                <div className="text-9xl font-bold text-white" style={{animation: 'pulse 1.5s infinite'}}>
                  {countdown}
                </div>
              </div>
          )}

          {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é */}
          {showFeedback && (
              <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 px-6 py-3 rounded-lg shadow-lg z-40"
                   style={{
                     animation: 'bounce 0.5s',
                     backgroundColor: feedbackType === 'success'
                         ? 'var(--bg-green-700, rgb(21, 128, 61))'
                         : 'var(--bg-red-700, rgb(185, 28, 28))',
                     color: 'white'
                   }}>
                {feedbackMessage}
              </div>
          )}

          {/* –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–µ—Ç–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è */}
          <div className="absolute inset-0 grid grid-cols-8 grid-rows-6 gap-0.5 pointer-events-none">
            {Array(48).fill(0).map((_, idx) => (
                <div key={idx}
                     className="bg-gray-600 dark:bg-gray-300 bg-opacity-20 dark:bg-opacity-20 transition-colors"></div>
            ))}
          </div>
        </div>

        {/* –°—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π */}
        <style>
          {`
          @keyframes fall {
            from { top: -20px; }
            to { top: 100%; }
          }
          
          @keyframes fallTransform {
            from { transform: translateY(-20px); }
            to { transform: translateY(calc(100vh - 100px)); }
          }
          
          @keyframes fallNew {
            0% { top: -80px; }
            100% { top: 100%; }
          }
          
          @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
          }
          
          @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.8; transform: scale(1.05); }
            100% { opacity: 1; transform: scale(1); }
          }
          
          @keyframes bounce {
            0%, 100% { transform: translateX(-50%) translateY(0); }
            50% { transform: translateX(-50%) translateY(-10px); }
          }
        `}
        </style>
      </div>
  );
};

export default DerivFall;