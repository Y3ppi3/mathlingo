// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è src/components/adventure/EnhancedAdventureMap.tsx
import React, { useState, useEffect } from 'react';
import { fetchMapData } from '../../utils/api';
import EnhancedLocationWidget from './EnhancedLocationWidget';

interface TaskGroup {
    id: number;
    name: string;
    description: string;
    difficulty: number;
    reward_points: number;
    tasks: number[];
    completed: boolean;
}

interface GameMechanic {
    id: string;
    name: string;
    description: string;
    icon: string;
    type: string;
}

interface Location {
    id: number;
    name: string;
    description: string;
    position_x: number;
    position_y: number;
    icon_url: string;
    unlocked: boolean;
    completed: boolean;
    taskGroups: TaskGroup[];
    gameMechanics: GameMechanic[]; // –î–æ–±–∞–≤–ª–µ–Ω–æ: –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
}

interface MapData {
    id: number;
    name: string;
    description: string;
    background_image: string;
    subject_id: number;
    locations: Location[];
}

interface UserProgress {
    level: number;
    totalPoints: number;
    completedLocations: number[];
    unlockedLocations: number[];
    unlockedAchievements: number[];
}

interface MapResponse {
    map: MapData;
    userProgress: UserProgress;
}

interface EnhancedAdventureMapProps {
    subjectId: number;
}

const EnhancedAdventureMap: React.FC<EnhancedAdventureMapProps> = ({ subjectId }) => {
    const [locations, setLocations] = useState<Location[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const [selectedLocation, setSelectedLocation] = useState<Location | null>(null);
    const [userProgress, setUserProgress] = useState<UserProgress | null>(null);

    useEffect(() => {
        const loadMapData = async () => {
            try {
                setLoading(true);
                const data = await fetchMapData(subjectId) as MapResponse;

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const processedLocations = data.map.locations.map((loc) => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –∏–≥—Ä
                    const subjectType = subjectId === 1 ? 'derivatives' : 'integrals';

                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∫ –ª–æ–∫–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë ID –∏ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
                    const locationGameMechanics: GameMechanic[] = getGameMechanicsForLocation(loc.id, subjectType);

                    return {
                        ...loc,
                        unlocked: data.userProgress.unlockedLocations.includes(loc.id),
                        completed: data.userProgress.completedLocations.includes(loc.id),
                        taskGroups: loc.taskGroups.map((group) => ({
                            ...group,
                            completed: data.userProgress.completedLocations.includes(group.id)
                        })),
                        gameMechanics: locationGameMechanics
                    };
                });

                setLocations(processedLocations);
                setUserProgress(data.userProgress);
            } catch (err) {
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        loadMapData();
    }, [subjectId]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
    const getGameMechanicsForLocation = (locationId: number, subjectType: 'derivatives' | 'integrals'): GameMechanic[] => {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π —Ä–∞–∑–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –º–µ—Ö–∞–Ω–∏–∫

        const allMechanics: Record<string, GameMechanic[]> = {
            derivatives: [
                {
                    id: 'deriv-fall',
                    name: '–ü–∞–¥–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ',
                    description: '–ù–∞—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–∞–¥–∞—é—â–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π!',
                    icon: 'üìâ',
                    type: 'fall'
                },
                {
                    id: 'math-lab-derivatives',
                    name: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö',
                    description: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ!',
                    icon: 'üî¨',
                    type: 'lab'
                }
            ],
            integrals: [
                {
                    id: 'integral-builder',
                    name: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤',
                    description: '–°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏–∑ —á–∞—Å—Ç–µ–π!',
                    icon: 'üß©',
                    type: 'builder'
                },
                {
                    id: 'math-lab-integrals',
                    name: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤',
                    description: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã!',
                    icon: 'üß™',
                    type: 'lab'
                }
            ]
        };

        // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        // –ü–µ—Ä–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –∏–º–µ–µ—Ç –≤—Å–µ –º–µ—Ö–∞–Ω–∏–∫–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ø–æ –æ–¥–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π
        if (locationId === 1) {
            return allMechanics[subjectType];
        } else {
            // –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –º–µ—Ö–∞–Ω–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ID –ª–æ–∫–∞—Ü–∏–∏
            const mechIndex = (locationId % allMechanics[subjectType].length);
            return [allMechanics[subjectType][mechIndex]];
        }
    };

    const handleLocationClick = (location: Location) => {
        if (location.unlocked) {
            setSelectedLocation(location);
        } else {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ª–æ–∫–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        }
    };

    if (loading) return <div className="flex justify-center items-center h-96">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π...</div>;
    if (error) return <div className="text-red-500 p-4">{error}</div>;

    return (
        <div className="relative w-full h-96 bg-white dark:bg-gray-800 rounded-lg overflow-hidden transition-colors">
            {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã */}
            <div className="absolute inset-0 bg-cover bg-center" style={{ backgroundImage: 'url(/images/map-background.jpg)' }}></div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
            {userProgress && (
                <div className="absolute top-4 left-4 bg-white dark:bg-gray-800 bg-opacity-90 dark:bg-opacity-90 p-3 rounded-lg shadow-lg transition-colors">
                    <div className="flex items-center space-x-3">
                        <div className="text-xl font-bold text-indigo-600 dark:text-indigo-400">
                            –£—Ä–æ–≤–µ–Ω—å {userProgress.level}
                        </div>
                        <div className="text-gray-700 dark:text-gray-300">
                            {userProgress.totalPoints} –æ—á–∫–æ–≤
                        </div>
                    </div>
                </div>
            )}

            {/* –õ–æ–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ */}
            {locations.map((location) => (
                <div
                    key={location.id}
                    className={`absolute cursor-pointer transition-all duration-300 ${
                        location.unlocked ? 'opacity-100 hover:scale-110' : 'opacity-50 filter grayscale'
                    } ${location.completed ? 'ring-2 ring-green-500' : ''}`}
                    style={{
                        left: `${location.position_x}%`,
                        top: `${location.position_y}%`,
                        transform: 'translate(-50%, -50%)'
                    }}
                    onClick={() => handleLocationClick(location)}
                >
                    <div className="w-12 h-12 flex items-center justify-center">
                        <img
                            src={location.icon_url || '/images/default-location.svg'}
                            alt={location.name}
                            className="w-full h-full object-contain"
                        />
                    </div>
                    <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-full mt-1 text-xs font-bold text-gray-800 dark:text-gray-200 transition-colors">
                        {location.name}
                    </div>

                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫ */}
                    {location.unlocked && location.gameMechanics.length > 0 && (
                        <div className="absolute -top-2 -right-2 flex">
                            {location.gameMechanics.slice(0, 2).map((mechanic, index) => (
                                <div key={mechanic.id} className="w-6 h-6 bg-white dark:bg-gray-800 rounded-full flex items-center justify-center shadow-md transition-colors" style={{ marginLeft: index > 0 ? '-0.5rem' : '0' }}>
                                    <span>{mechanic.icon}</span>
                                </div>
                            ))}
                            {location.gameMechanics.length > 2 && (
                                <div className="w-6 h-6 bg-white dark:bg-gray-800 rounded-full flex items-center justify-center shadow-md transition-colors" style={{ marginLeft: '-0.5rem' }}>
                                    <span>+{location.gameMechanics.length - 2}</span>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            ))}

            {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ */}
            {selectedLocation && (
                <EnhancedLocationWidget
                    locationName={selectedLocation.name}
                    locationDescription={selectedLocation.description}
                    subjectId={subjectId}
                    taskGroups={selectedLocation.taskGroups}
                    gameMechanics={selectedLocation.gameMechanics}
                    onClose={() => setSelectedLocation(null)}
                />
            )}
        </div>
    );
};

export default EnhancedAdventureMap;